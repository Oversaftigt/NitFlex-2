@using BlazorNitflex.BlazorComponents
@using BlazorNitflex.Layouts
@using BlazorNitflex.Models
@using BlazorNitflex.Services
@using BlazorNitflex.Services.Interfaces
@using Microsoft.AspNetCore.Authorization
@using Radzen
@using Radzen.Blazor
@inject IAuthenticationService _authenticationService
@inject NotificationService _notificationService
@inject IMovieService _movieService
@inject IRentalService _rentalService
@inject NavigationManager _navigationManager
@inject DialogService _dialogService
@inject CustomAuthenticationStateProvider _authenticationStateProvider
@layout MainLayout
@page "/movies"
@attribute [Authorize(Roles = "Admin, User")]

<div></div>
<div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px;">
    @foreach (var movie in allMovies)
    {
        <MovieDetailsComponent Movie="@movie" OnRentMovie="@HandleMovieRent" OnWatchMovie="@HandleMovieWatching"></MovieDetailsComponent>
    }
</div>

@code {

    private List<MovieItem> allMovies = new List<MovieItem>();

    protected override async Task OnInitializedAsync()
    {
        allMovies = await _movieService.GetAllMovies();

    }

    private async void HandleMovieRent(Guid movieId)
    {
        var userId = await _authenticationService.GetUserIdAsync();

        CreateRentalItem newRental = new CreateRentalItem()
            {
                MovieId = movieId,
                UserId = Guid.Parse(userId),
                RentalStartDate = DateTime.UtcNow.Date,
                RentalEndDate = DateTime.UtcNow.Date.AddDays(7)
            };

        var rentalResponse = await _rentalService.CreateRental(newRental);

        if (rentalResponse is true)
        {
            _notificationService.Notify(NotificationSeverity.Success, "You have rented the movie!");
        }
        else
        {
            _notificationService.Notify(NotificationSeverity.Warning, "Error renting movie, do you already have an ongoing rent on this movie?");
        }
    }

    private async void HandleMovieWatching(Guid movieId)
    {
        var userId = await _authenticationService.GetUserIdAsync();

        RentalValidationRequest validationRequest = new()
            {
                MovieId = movieId,
                UserId = Guid.Parse(userId)
            };

        bool doesUserHaveValidRentalForThisMovie = await _rentalService.DoesUserHaveRentalForThisMovie(validationRequest);

        //only used to get movie name
        var movieToWatch = allMovies.First(m => m.Id == movieId);

        if (doesUserHaveValidRentalForThisMovie is true)
        {
            var movieLink = await _movieService.GetMovieLink(validationRequest);
            await _dialogService.OpenAsync<WatchMovieComponent>(
                movieToWatch.MovieName,
                new Dictionary<string, object> {{"MovieLink", movieLink}},
                new DialogOptions {Width = "80%", Height = "80%"}
            );
        }
        else
        {
            _notificationService.Notify(NotificationSeverity.Warning, "FBI OPEN UP");
        }
    }

}
